// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// popC
Rcpp::List popC(int size, Rcpp::NumericVector arr);
RcppExport SEXP _queueR_popC(SEXP sizeSEXP, SEXP arrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type arr(arrSEXP);
    rcpp_result_gen = Rcpp::wrap(popC(size, arr));
    return rcpp_result_gen;
END_RCPP
}
// pushC
Rcpp::List pushC(int size, Rcpp::NumericVector arr, double val);
RcppExport SEXP _queueR_pushC(SEXP sizeSEXP, SEXP arrSEXP, SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< double >::type val(valSEXP);
    rcpp_result_gen = Rcpp::wrap(pushC(size, arr, val));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_queueR_popC", (DL_FUNC) &_queueR_popC, 2},
    {"_queueR_pushC", (DL_FUNC) &_queueR_pushC, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_queueR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
